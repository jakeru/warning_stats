#!/usr/bin/env python3

import argparse
from collections import defaultdict
import os

# Requires pip package warning-parser:
# https://pypi.org/project/warning-parser/
import warning_parser


def parse_args():
    parser = argparse.ArgumentParser(
        prog="Warning Statistics",
        description="""
Summarizes warnings generated by a compiler or linter.
""",
    )
    parser.add_argument("file", help="File with warnings generated by tool")
    parser.add_argument("--tool", help="Type of tool", default="gcc")
    return parser.parse_args()


def summarize_topic(topic, warnings_per_topic, printer):
    print(topic)
    topic_sorted = sorted(
        warnings_per_topic.keys(),
        key=lambda k: len(warnings_per_topic[k]),
        reverse=True,
    )
    for k in topic_sorted:
        printer(k, len(warnings_per_topic[k]))


def main():
    args = parse_args()
    warnings = warning_parser.get_warnings(args.file, args.tool)
    severities = defaultdict(list)
    categories = defaultdict(list)
    files = defaultdict(list)
    for w in warnings:
        severities[w.get_severity()].append(w)
        categories[w.get_category()].append(w)
        files[w.get_filepath()].append(w)

    summarize_topic("Severities", severities, lambda k, v: print(f"  {v:4d} {k}"))
    summarize_topic("Categories", categories, lambda k, v: print(f"  {v:4d} {k}"))
    summarize_topic(
        "Files", files, lambda k, v: print(f"  {v:4d} {os.path.basename(k)}")
    )


if __name__ == "__main__":
    main()
